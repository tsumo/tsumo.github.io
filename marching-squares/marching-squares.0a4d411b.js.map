{"version":3,"sources":["src/vector2.ts","src/ball.ts","src/utils.ts","src/render.ts","index.ts"],"names":[],"mappings":"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","file":"marching-squares.0a4d411b.js","sourceRoot":"..","sourcesContent":["export type V2 = [number, number];\n\nexport const v2 = {\n  scale: (a: V2, n: number): V2 => [a[0] * n, a[1] * n],\n\n  sub: (a: V2, b: V2): V2 => [a[0] - b[0], a[1] - b[1]],\n\n  dot: (a: V2, b: V2): number => a[0] * b[0] + a[1] * b[1],\n\n  reflect: (a: V2, norm: V2): V2 => {\n    const d = v2.scale(norm, v2.dot(a, norm));\n    return v2.sub(v2.scale(d, 2), a);\n  },\n\n  fromAngle: (n: number): V2 => [Math.cos(n), Math.sin(n)],\n\n  toAngle: (a: V2): number => Math.atan2(a[1], a[0]),\n};\n","import { V2, v2 } from \"./vector2\";\n\nexport class Ball {\n  private readonly width: number;\n  private readonly height: number;\n  readonly radius: number;\n  readonly speed: number;\n  x: number;\n  y: number;\n  angle: number;\n\n  constructor(\n    width: number,\n    height: number,\n    x: number,\n    y: number,\n    radius: number,\n    speed: number,\n    angle: number\n  ) {\n    this.width = width;\n    this.height = height;\n    this.radius = radius;\n    this.speed = speed;\n    this.x = x;\n    this.y = y;\n    this.angle = angle;\n  }\n\n  update() {\n    const { x, y } = this;\n    const dx = Math.cos(this.angle) * this.speed;\n    const dy = Math.sin(this.angle) * this.speed;\n    const v = v2.fromAngle(this.angle);\n    let r: V2 | null = null;\n    if (y + dy > this.height) {\n      r = v2.reflect(v, [1, 0]);\n    }\n    if (y + dy < 0) {\n      r = v2.reflect(v, [-1, 0]);\n    }\n    if (x + dx > this.width) {\n      r = v2.reflect(v, [0, -1]);\n    }\n    if (x + dx < 0) {\n      r = v2.reflect(v, [0, 1]);\n    }\n    if (r !== null) {\n      const newAngle = v2.toAngle(r);\n      this.angle = newAngle;\n    } else {\n      this.x += dx;\n      this.y += dy;\n    }\n  }\n}\n","const { random, floor, PI } = Math;\n\nexport const rand = (n = 1): number => random() * n;\n\nexport const randInt = (range: number): number => floor(rand() * range);\n\nexport const randSign = (): number => (rand() >= 0.5 ? 1 : -1);\n\nexport const randRange = (from: number, to: number): number =>\n  rand(to - from) + from;\n\nexport const randDeviate = (n: number): number => rand(n * 2) - n;\n\nexport const deg2Rad = (d: number): number => (d * PI) / 180;\n","import { Ball } from \"./ball\";\nimport { rand, randRange } from \"./utils\";\n\nconst colors = {\n  grid: \"#263339\",\n  ball: \"salmon\",\n  influence: \"indianred\",\n};\n\ntype LineCoefs = [number, number, number, number];\n\nconst lines: Record<string, LineCoefs> = {\n  leftBottom: [0, 0.5, 0.5, 1],\n  rightBottom: [1, 0.5, 0.5, 1],\n  rightTop: [0.5, 0, 1, 0.5],\n  leftTop: [0.5, 0, 0, 0.5],\n  horizontal: [0, 0.5, 1, 0.5],\n  vertical: [0.5, 0, 0.5, 1],\n};\n\nconst configurationsLUT: Record<number, LineCoefs[]> = {\n  0b0000: [],\n  0b0001: [lines.leftBottom],\n  0b0010: [lines.rightBottom],\n  0b0011: [lines.horizontal],\n  0b0100: [lines.rightTop],\n  0b0101: [lines.leftTop, lines.rightBottom],\n  0b0110: [lines.vertical],\n  0b0111: [lines.leftTop],\n  0b1000: [lines.leftTop],\n  0b1001: [lines.vertical],\n  0b1010: [lines.rightTop, lines.leftBottom],\n  0b1011: [lines.rightTop],\n  0b1100: [lines.horizontal],\n  0b1101: [lines.rightBottom],\n  0b1110: [lines.leftBottom],\n  0b1111: [],\n};\n\nexport class Render {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n\n  private readonly width = 640;\n  private readonly height = 480;\n\n  private readonly gridStep = 8;\n  private readonly widthCells: number;\n  private readonly heightCells: number;\n\n  private readonly balls: Ball[] = [];\n\n  private influences: number[][] = [];\n  private configurations: number[][] = [];\n\n  constructor(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    canvas.width = this.width;\n    canvas.height = this.height;\n    this.widthCells = Math.ceil(this.width / this.gridStep);\n    this.heightCells = Math.ceil(this.height / this.gridStep);\n\n    for (let x = 0; x <= this.widthCells; x++) {\n      const column: number[] = Array(this.heightCells);\n      column.fill(0);\n      this.influences.push(column);\n    }\n\n    for (let x = 0; x <= this.widthCells; x++) {\n      const column: number[] = Array(this.heightCells);\n      column.fill(0b0000);\n      this.configurations.push(column);\n    }\n\n    for (let i = 0; i < 10; ++i) {\n      this.balls.push(\n        new Ball(\n          this.width,\n          this.height,\n          rand(this.width),\n          rand(this.height),\n          randRange(30, 50),\n          randRange(1, 2),\n          rand(Math.PI * 2)\n        )\n      );\n    }\n\n    const tick = () => {\n      this.clear();\n      this.updateBalls();\n      this.calcConfigurations();\n      this.drawGrid();\n      this.drawConfigurations();\n      this.drawBalls();\n      requestAnimationFrame(tick);\n    };\n    tick();\n  }\n\n  private clear() {\n    this.ctx.clearRect(0, 0, this.width, this.height);\n  }\n\n  private updateBalls() {\n    this.balls.forEach((ball) => ball.update());\n  }\n\n  private drawGrid() {\n    this.ctx.fillStyle = colors.grid;\n    for (let x = 0; x < this.width; x += this.gridStep) {\n      this.ctx.fillRect(x, 0, 1, this.height);\n    }\n    for (let y = 0; y < this.height; y += this.gridStep) {\n      this.ctx.fillRect(0, y, this.width, 1);\n    }\n  }\n\n  private calcConfigurations() {\n    for (let x = 0; x <= this.widthCells; x++) {\n      for (let y = 0; y <= this.heightCells; y++) {\n        const influence = this.balls.reduce((prev, curr) => {\n          const xx = (x * this.gridStep - curr.x) ** 2;\n          const yy = (y * this.gridStep - curr.y) ** 2;\n          return curr.radius ** 2 / (xx + yy) + prev;\n        }, 0);\n        this.influences[x][y] = influence;\n      }\n    }\n    for (let i = 0; i < this.widthCells; i++) {\n      for (let j = 0; j < this.heightCells; j++) {\n        let c = 0b0000;\n        if (this.influences[i][j] >= 1) {\n          c = c | 0b1000;\n        }\n        if (this.influences[i + 1][j] >= 1) {\n          c = c | 0b0100;\n        }\n        if (this.influences[i][j + 1] >= 1) {\n          c = c | 0b0001;\n        }\n        if (this.influences[i + 1][j + 1] >= 1) {\n          c = c | 0b0010;\n        }\n        this.configurations[i][j] = c;\n      }\n    }\n  }\n\n  private drawLine(i: number, j: number, coefs: LineCoefs) {\n    const s = this.gridStep;\n    const is = i * s;\n    const js = j * s;\n    this.ctx.beginPath();\n    this.ctx.moveTo(coefs[0] * s + is, coefs[1] * s + js);\n    this.ctx.lineTo(coefs[2] * s + is, coefs[3] * s + js);\n    this.ctx.stroke();\n  }\n\n  private drawConfigurations() {\n    this.ctx.strokeStyle = colors.influence;\n    for (let i = 0; i < this.configurations.length; i++) {\n      for (let j = 0; j < this.configurations[i].length; j++) {\n        const configuration = this.configurations[i][j];\n        configurationsLUT[configuration].forEach((coefs) =>\n          this.drawLine(i, j, coefs)\n        );\n      }\n    }\n  }\n\n  private drawBalls() {\n    this.ctx.strokeStyle = colors.ball;\n    this.balls.forEach((ball) => {\n      this.ctx.beginPath();\n      this.ctx.arc(ball.x, ball.y, ball.radius, 0, Math.PI * 2);\n      this.ctx.stroke();\n    });\n  }\n}\n","import { Render } from \"./src/render\";\n\nconst init = () => {\n  const canvas = document.getElementById(\"c\");\n  if (!(canvas instanceof HTMLCanvasElement)) {\n    return;\n  }\n  const ctx = canvas.getContext(\"2d\");\n  if (ctx === null) {\n    return;\n  }\n  const render = new Render(canvas, ctx);\n};\n\ninit();\n"]}