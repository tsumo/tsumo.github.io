{"version":3,"sources":["domain/postDomain.ts","service/postService.ts","store/postStore.tsx","components/Post.style.ts","components/Post.tsx","components/Posts.tsx","hooks.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["assertIsArrayOfIPost","posts","Array","TypeError","forEach","post","userId","id","title","body","assertIsPost","getAllPosts","a","async","fetch","response","json","createStore","loading","error","this","length","addPost","unshift","removePost","filter","StoreContext","React","createContext","StoreProvider","children","store","useLocalStore","Provider","value","useStore","useContext","Error","useStyles","makeStyles","theme","paper","padding","spacing","color","palette","text","secondary","flexBasis","closeButton","marginTop","Post","props","styles","className","item","container","direction","alignItems","justify","variant","size","onClick","Posts","observer","postCount","useEffect","parameters","autorun","useAutorun","document","m","Date","now","xs","map","key","App","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAyBO,SAASA,EAAqBC,GACnC,KAAMA,aAAiBC,OACrB,MAAM,IAAIC,UAAU,0BAEtBF,EAAMG,SAAQ,SAAAC,GAAI,OAtBb,SAAsBA,GAC3B,GAAoB,kBAATA,EACT,MAAM,IAAIF,UAAU,0BAEtB,GAA2B,kBAAhBE,EAAKC,OACd,MAAM,IAAIH,UAAU,2BAEtB,GAAuB,kBAAZE,EAAKE,GACd,MAAM,IAAIJ,UAAU,uBAEtB,GAA0B,kBAAfE,EAAKG,MACd,MAAM,IAAIL,UAAU,0BAEtB,GAAyB,kBAAdE,EAAKI,KACd,MAAM,IAAIN,UAAU,yBAQAO,CAAaL,MC3BrC,IAEaM,EAAc,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACFE,MAHR,+CAEU,cACnBC,EADmB,kBAAAH,EAAA,MAENG,EAASC,QAFH,cAGzBhB,EADMgB,EAFmB,0BAIlBA,GAJkB,sCCWrBC,EAAc,iBAAe,CACjChB,MAAO,GACPiB,SAAS,EACTC,OAAO,EAEP,gBACE,OAAOC,KAAKnB,MAAMoB,QAGpBC,QATiC,SASzBjB,GACNe,KAAKnB,MAAMsB,QAAQlB,IAGrBmB,WAbiC,SAatBjB,GACTa,KAAKnB,MAAQmB,KAAKnB,MAAMwB,QAAO,SAAApB,GAAI,OAAIA,EAAKE,KAAOA,MAG/CI,YAjB2B,oFAkB/BS,KAAKF,SAAU,EAlBgB,4BAoBVP,KApBU,OAoB7BS,KAAKnB,MApBwB,OAqB7BmB,KAAKF,SAAU,EACfE,KAAKD,OAAQ,EAtBgB,gDAwB7BC,KAAKF,SAAU,EACfE,KAAKD,OAAQ,EAzBgB,2DA8B7BO,EAAeC,IAAMC,cAA6B,MAE3CC,EAA0B,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClCC,EAAQC,YAAcf,GAC5B,OACE,kBAACS,EAAaO,SAAd,CAAuBC,MAAOH,GAAQD,IAI7BK,EAAW,WACtB,IAAMJ,EAAQJ,IAAMS,WAAWV,GAC/B,IAAKK,EACH,MAAM,IAAIM,MAAM,iDAElB,OAAON,G,4DCzCMO,EAhBGC,aAAW,SAAAC,GAAK,MAAK,CACrCC,MAAO,CACLC,QAASF,EAAMG,QAAQ,GACvBC,MAAOJ,EAAMK,QAAQC,KAAKC,WAE5BvC,MAAO,CACLwC,UAAW,OAEbC,YAAa,CACXD,UAAW,MAEbvC,KAAM,CACJyC,UAAWV,EAAMG,QAAQ,QCkCdQ,EAlCF,SAACC,GAAuB,IAC3B/C,EAAS+C,EAAT/C,KACAmB,EAAeW,IAAfX,WACF6B,EAASf,IAEf,OACE,kBAAC,IAAD,CAAOgB,UAAWD,EAAOZ,OACvB,kBAAC,IAAD,CAAMc,MAAI,EAACC,WAAS,EAACC,UAAU,UAC7B,kBAAC,IAAD,CACEF,MAAI,EACJC,WAAS,EACTC,UAAU,MACVC,WAAW,aACXC,QAAQ,iBAER,kBAAC,IAAD,CAAYC,QAAQ,KAAKN,UAAWD,EAAO7C,OACxCH,EAAKG,OAER,kBAAC,IAAD,CACEqD,KAAK,QACLP,UAAWD,EAAOJ,YAClBa,QAAS,kBAAMtC,EAAWnB,EAAKE,MAE/B,kBAAC,IAAD,QAGJ,kBAAC,IAAD,CAAYqD,QAAQ,QAAQN,UAAWD,EAAO5C,MAC3CJ,EAAKI,S,OCiBDsD,EA/CDC,aAAS,WAAO,IAAD,EACwC7B,IAA3DlC,EADmB,EACnBA,MAAOiB,EADY,EACZA,QAASC,EADG,EACHA,MAAO8C,EADJ,EACIA,UAAW3C,EADf,EACeA,QAASX,EADxB,EACwBA,YAMnD,OAJAuD,qBAAU,kBAAMvD,MAAe,CAACA,ICTR,WAAsC,IAAD,uBAAjCwD,EAAiC,yBAAjCA,EAAiC,gBAC7DxC,IAAMuC,WAAU,kBAAME,IAAO,WAAP,EAAWD,KAAa,CAACA,IDU/CE,EAAW,kBAAOC,SAAS9D,MAAT,UAAoByD,EAApB,eAEd9C,EACK,kBAAC,IAAD,CAAYyB,MAAM,iBAAlB,iBAGL1B,EACK,kBAAC,IAAD,MAIP,oCACE,kBAAC,IAAD,CAAKqD,EAAG,GACN,kBAAC,IAAD,CACET,QAAS,kBACPxC,EAAQ,CACNf,GAAIiE,KAAKC,MACTnE,OAAQ,EACRE,MAAO,QACPC,KAAM,WAIV,kBAAC,IAAD,CAAYmD,QAAQ,SAAShB,MAAM,iBAAnC,SAMJ,kBAAC,IAAD,CAAMY,WAAS,EAACb,QAAS,GACvB,kBAAC,IAAD,CAAMa,WAAS,EAACD,MAAI,EAACmB,GAAI,GAAI/B,QAAS,GACnC1C,EAAM0E,KAAI,SAAAtE,GAAI,OACb,kBAAC,IAAD,CAAMkD,MAAI,EAACmB,GAAI,GAAIE,IAAKvE,EAAKE,IAC3B,kBAAC,EAAD,CAAMF,KAAMA,c,iBElCXwE,EAVH,WACV,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAWC,SAAS,MAClB,kBAAC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dc40f0a6.chunk.js","sourcesContent":["export interface IPost {\r\n  userId: number;\r\n  id: number;\r\n  title: string;\r\n  body: string;\r\n}\r\n\r\nexport function assertIsPost(post: IPost): asserts post is IPost {\r\n  if (typeof post !== \"object\") {\r\n    throw new TypeError(\"Post is not an object!\");\r\n  }\r\n  if (typeof post.userId !== \"number\") {\r\n    throw new TypeError(\"UserId is not a number!\");\r\n  }\r\n  if (typeof post.id !== \"number\") {\r\n    throw new TypeError(\"Id is not a number!\");\r\n  }\r\n  if (typeof post.title !== \"string\") {\r\n    throw new TypeError(\"Title is not a string!\");\r\n  }\r\n  if (typeof post.body !== \"string\") {\r\n    throw new TypeError(\"Body is not a string!\");\r\n  }\r\n}\r\n\r\nexport function assertIsArrayOfIPost(posts: IPost[]): asserts posts is IPost[] {\r\n  if (!(posts instanceof Array)) {\r\n    throw new TypeError(\"Posts is not an array!\");\r\n  }\r\n  posts.forEach(post => assertIsPost(post));\r\n}\r\n","import { IPost, assertIsArrayOfIPost } from \"../domain/postDomain\";\r\n\r\nconst POST_URL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\nexport const getAllPosts = async (): Promise<IPost[]> => {\r\n  const response = await fetch(POST_URL);\r\n  const json = await response.json();\r\n  assertIsArrayOfIPost(json);\r\n  return json;\r\n};\r\n","import React from \"react\";\r\nimport { useLocalStore } from \"mobx-react-lite\";\r\nimport { IPost } from \"../domain/postDomain\";\r\nimport { getAllPosts } from \"../service/postService\";\r\n\r\ntype TStore = {\r\n  posts: IPost[];\r\n  loading: boolean;\r\n  error: boolean;\r\n  postCount: number;\r\n  addPost: (post: IPost) => void;\r\n  removePost: (id: number) => void;\r\n  getAllPosts: () => void;\r\n};\r\n\r\nconst createStore = (): TStore => ({\r\n  posts: [],\r\n  loading: false,\r\n  error: false,\r\n\r\n  get postCount() {\r\n    return this.posts.length;\r\n  },\r\n\r\n  addPost(post) {\r\n    this.posts.unshift(post);\r\n  },\r\n\r\n  removePost(id) {\r\n    this.posts = this.posts.filter(post => post.id !== id);\r\n  },\r\n\r\n  async getAllPosts() {\r\n    this.loading = true;\r\n    try {\r\n      this.posts = await getAllPosts();\r\n      this.loading = false;\r\n      this.error = false;\r\n    } catch {\r\n      this.loading = false;\r\n      this.error = true;\r\n    }\r\n  }\r\n});\r\n\r\nconst StoreContext = React.createContext<TStore | null>(null);\r\n\r\nexport const StoreProvider: React.FC = ({ children }) => {\r\n  const store = useLocalStore(createStore);\r\n  return (\r\n    <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStore = () => {\r\n  const store = React.useContext(StoreContext);\r\n  if (!store) {\r\n    throw new Error(\"useStore must be used within a StoreProvider.\");\r\n  }\r\n  return store;\r\n};\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    color: theme.palette.text.secondary\r\n  },\r\n  title: {\r\n    flexBasis: \"90%\"\r\n  },\r\n  closeButton: {\r\n    flexBasis: \"5%\"\r\n  },\r\n  body: {\r\n    marginTop: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper/Paper\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport useStyles from \"./Post.style\";\r\nimport { IPost } from \"../domain/postDomain\";\r\nimport { useStore } from \"../store/postStore\";\r\n\r\ninterface IItemProps {\r\n  post: IPost;\r\n}\r\n\r\nconst Post = (props: IItemProps) => {\r\n  const { post } = props;\r\n  const { removePost } = useStore();\r\n  const styles = useStyles();\r\n\r\n  return (\r\n    <Paper className={styles.paper}>\r\n      <Grid item container direction=\"column\">\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"row\"\r\n          alignItems=\"flex-start\"\r\n          justify=\"space-between\"\r\n        >\r\n          <Typography variant=\"h4\" className={styles.title}>\r\n            {post.title}\r\n          </Typography>\r\n          <IconButton\r\n            size=\"small\"\r\n            className={styles.closeButton}\r\n            onClick={() => removePost(post.id)}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Typography variant=\"body1\" className={styles.body}>\r\n          {post.body}\r\n        </Typography>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useEffect } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport Grid from \"@material-ui/core/Grid/Grid\";\r\nimport Button from \"@material-ui/core/Button/Button\";\r\nimport Box from \"@material-ui/core/Box/Box\";\r\nimport Typography from \"@material-ui/core/Typography/Typography\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress/LinearProgress\";\r\nimport { useStore } from \"../store/postStore\";\r\nimport Post from \"./Post\";\r\nimport { useAutorun } from \"../hooks\";\r\n\r\nconst Posts = observer(() => {\r\n  const { posts, loading, error, postCount, addPost, getAllPosts } = useStore();\r\n\r\n  useEffect(() => getAllPosts(), [getAllPosts]);\r\n\r\n  useAutorun(() => (document.title = `${postCount} - total`));\r\n\r\n  if (error) {\r\n    return <Typography color=\"textSecondary\">Network error</Typography>;\r\n  }\r\n\r\n  if (loading) {\r\n    return <LinearProgress />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Box m={1}>\r\n        <Button\r\n          onClick={() =>\r\n            addPost({\r\n              id: Date.now(),\r\n              userId: 1,\r\n              title: \"title\",\r\n              body: \"body\"\r\n            })\r\n          }\r\n        >\r\n          <Typography variant=\"button\" color=\"textSecondary\">\r\n            New\r\n          </Typography>\r\n        </Button>\r\n      </Box>\r\n\r\n      <Grid container spacing={2}>\r\n        <Grid container item xs={12} spacing={3}>\r\n          {posts.map(post => (\r\n            <Grid item xs={12} key={post.id}>\r\n              <Post post={post} />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Posts;\r\n","import React from \"react\";\r\nimport { autorun } from \"mobx\";\r\n\r\ntype useAutorunParams = Parameters<typeof autorun>;\r\n\r\nexport const useAutorun = (...parameters: useAutorunParams) => {\r\n  React.useEffect(() => autorun(...parameters), [parameters]);\r\n};\r\n","import React from \"react\";\nimport Posts from \"./Posts\";\nimport Container from \"@material-ui/core/Container/Container\";\nimport { StoreProvider } from \"../store/postStore\";\n\nconst App = () => {\n  return (\n    <StoreProvider>\n      <Container maxWidth=\"sm\">\n        <Posts />\n      </Container>\n    </StoreProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}